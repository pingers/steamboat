<?php

namespace SteamBoat\SteamBoatBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping\ClassMetadata;

/**
 * SteamIdStorageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SteamIdStorageRepository extends EntityRepository
{

/**
 * Retrieve a SteamId by Nickname. Fetches friends.
 *
 * @param $nickname
 * @return object|null
 */
    public function findOneByNickname($nickname) {
        // Check local cache.
        $steamIdStorage = $this->findOneBy(array('nickname' => $nickname));

        return $steamIdStorage ?: null;
    }

/**
 * Retrieve a SteamId by SteamId64. Does not fetch friends by default.
 *
 * @param $steamId64
 * @return object|null
 */
    public function findOneBySteamId64($steamId64) {
        // Check local cache.
        $steamIdStorage = $this->findOneBy(array('steamId64' => $steamId64));

        return $steamIdStorage ?: null;
    }

    /**
     * @param $steamId
     * @param $fetchFriends
     * @return object|null
     */
    public function createSteamIdStorage($steamId, $fetchFriends = FALSE) {
        $em = $this->getEntityManager();

        // Map the entity properties.
        $steamIdStorage = new SteamIdStorage();
        $steamIdStorage->setCustomUrl($steamId->getCustomUrl());
        $steamIdStorage->setFetchTime($steamId->getFetchTime());
        $steamIdStorage->setLimited($steamId->isLimited());
        $steamIdStorage->setNickname($steamId->getNickname());
        $steamIdStorage->setSteamId64($steamId->getSteamId64());
        $steamIdStorage->setTradeBanState($steamId->getTradeBanState());

        $this->addGames($steamIdStorage, $steamId->getGames());

        // Prevent recursively fetching friends of friends.
        if ($fetchFriends) {
            $this->addFriends($steamIdStorage, $steamId->getFriends());
        }

        $em->persist($steamIdStorage);
        return $steamIdStorage;
    }

    /**
     * @param $steamIdStorage
     * @return object|null
     */
    public function writeSteamIdStorage($steamIdStorage) {
        // Cache the steamId in the database.
        $em = $this->getEntityManager();
        $em->flush();
        return $steamIdStorage;
    }

    /**
     * @param $steamIdStorage
     * @param $games
     * @return object|null
     */
    public function addGames(&$steamIdStorage, $games) {
        $em = $this->getEntityManager();

        // Map games.
        $gameEm = $em->getRepository('SteamBoatBundle:SteamGameStorage');
        if ($games) {
            foreach ($games as $game) {
                // Check for existing game.
                if ($existingGame = $gameEm->findOneByAppId($game->getAppId())) {
                    $steamIdStorage->addGame($existingGame);
                }
                else {
                    $steamIdStorage->addGame($gameEm->createSteamGameStorage($game));
                }
            }
        }
        return $steamIdStorage;
    }

    /**
     * @param $steamIdStorage
     * @param $friends
     * @return object|null
     */
    public function addFriends(&$steamIdStorage, $friends) {
        $em = $this->getEntityManager();

        // Map games.
        $SteamIdEm = $em->getRepository('SteamBoatBundle:SteamIdStorage');
        if ($friends) {
            foreach ($friends as $friend) {
                // Check if we already know about this friend.
//                if ($existingId = $SteamIdEm->findOneBySteamId64($friend->getId())) {
//                    $steamIdStorage->addFriend($existingId);
//                }
//                else {
//                    $steamIdStorage->addFriend($SteamIdEm->createSteamIdStorage($friend));
//                }
            }
        }
        return $steamIdStorage;
    }
}
